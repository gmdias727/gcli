package repository

import (
    "{{ .ProjectName }}/source/model"
    "github.com/pkg/errors"
)

type {{ .StructName }}Repository interface {
    GetAll{{ .StructName }}(ctx context.Context) (*[]model.{{ .StructName }}, error)
    Get{{ .StructName }}ById(ctx context.Context, id uint) (*model.{{ .StructName }}, error)
    Create{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *model.{{.StructName}}) (uint, error)
    Update{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *model.{{.StructName}}) (uint, error)
    Delete{{ .StructName }}(ctx context.Context, id uint) (uint, error)
}

type {{ .StructNameLowerFirst }}Repository struct {
    *Repository
}

func New{{ .StructName }}Repository(repository *Repository) {{ .StructName }}Repository {
    return &{{ .StructNameLowerFirst }}Repository{
         Repository: repository,
    }
}

func (r *{{ .StructNameLowerFirst }}Repository) GetAll{{ .StructName }}(ctx context.Context) (*[]model.{{ .StructName }}, error) {
    var {{ .StructNameLowerFirst }} []model.{{ .StructName }}

    if err := r.db.Find(&{{ .StructNameLowerFirst }}).Error; err != nil {
        return nil, errors.Wrap(err, "failed to get all users")
    }

    return &{{ .StructNameLowerFirst }}, nil
}


func (r *{{ .StructNameLowerFirst }}Repository) Get{{ .StructName }}ById(ctx context.Context, id uint) (*model.{{ .StructName }}, error) {
    var {{ .StructNameLowerFirst }} model.{{ .StructName }}

    if err := r.db.Where("id = ?", id).First(&{{ .StructNameLowerFirst }}).Error; err != nil {
        return nil, errors.Wrap(err, "failed to get user by ID")
    }

    return &{{ .StructNameLowerFirst }}, nil
}

func (r *{{ .StructNameLowerFirst }}Repository) Create{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *model.{{ .StructName }}) (uint, error) {
    if err := r.db.Create({{.StructNameLowerFirst}}).Error; err != nil {
        return 0, errors.Wrap(err, "failed to create user")
    }
    
    return {{.StructNameLowerFirst}}.ID, nil
}

func (r *{{ .StructNameLowerFirst }}Repository) Update{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *model.{{.StructName}}) (uint, error) {
    if err := r.db.Save({{.StructNameLowerFirst}}).Error; err != nil {
         return {{.StructNameLowerFirst}}.ID, errors.Wrap(err, "failed to update user")
    }

    return {{.StructNameLowerFirst}}.ID, nil
}

func (r *{{ .StructNameLowerFirst }}Repository) Delete{{ .StructName }}(ctx context.Context, id uint) (uint, error) {
    if err := r.db.Delete(&model.{{ .StructName }}{}, id).Error; err != nil {
        return id, errors.Wrap(err, "failed to delete user")
    }

    return id, nil
}
