package service

import (
    "github.com/pkg/errors"
    "context"
    
    "{{ .ProjectName }}/source/model"
    "{{ .ProjectName }}/source/repository"
    "{{ .ProjectName }}/pkg/helper/mapper"
)

type Create{{ .StructName }}Request struct {
	Id       uint   `json:"id" binding:"required"`
}

type Update{{ .StructName }}Request struct {
	Id       uint   `json:"id" binding:"required"`
}


type {{ .StructName }}Service interface {
    GetAll{{ .StructName }}(ctx context.Context) (*[]model.{{ .StructName }}, error)
    Get{{ .StructName }}ById(ctx context.Context, id uint) (*model.{{ .StructName }}, error)
    Create{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *Create{{.StructName}}Request) (uint, error)
    Update{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *Update{{.StructName}}Request) (uint, error)
    Delete{{ .StructName }}(ctx context.Context, id uint) (uint, error)
}

type {{ .StructNameLowerFirst }}Service struct {
    *Service
    {{ .StructNameLowerFirst }}Repository repository.{{ .StructName }}Repository
}

func New{{ .StructName }}Service(service *Service, {{ .StructNameLowerFirst }}Repository repository.{{ .StructName }}Repository) {{ .StructName }}Service {
    return &{{ .StructNameLowerFirst }}Service{
        Service:        service,
        {{ .StructNameLowerFirst }}Repository: {{ .StructNameLowerFirst }}Repository,
    }
}

func (s *{{ .StructNameLowerFirst }}Service) GetAll{{ .StructName }}(ctx context.Context, ) (*[]model.{{ .StructName }}, error) {
    return s.{{ .StructNameLowerFirst }}Repository.GetAll{{ .StructName }}(ctx)
}

func (s *{{ .StructNameLowerFirst }}Service) Get{{ .StructName }}ById(ctx context.Context, id uint) (*model.{{ .StructName }}, error) {
    {{.StructNameLowerFirst}}, err := s.{{ .StructNameLowerFirst }}Repository.Get{{ .StructName }}ById(ctx, id)
    if err != nil {
        return nil, err
    }

    return {{.StructNameLowerFirst}}, nil
}

func (s *{{ .StructNameLowerFirst }}Service) Create{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *Create{{.StructName}}Request) (uint, error) {
    var {{.StructNameLowerFirst}}Entity model.{{.StructName}}
    mapper.Map({{.StructNameLowerFirst}}, &{{.StructNameLowerFirst}}Entity)

    return s.{{ .StructNameLowerFirst }}Repository.Create{{ .StructName }}(ctx, &{{.StructNameLowerFirst}}Entity)
}

func (s *{{ .StructNameLowerFirst }}Service) Update{{ .StructName }}(ctx context.Context, {{.StructNameLowerFirst}} *Update{{.StructName}}Request) (uint, error) {
    _, err := s.Get{{ .StructName }}ById(ctx, {{.StructNameLowerFirst}}.Id)
    if err == nil {
        return 0, errors.New("{{.StructNameLowerFirst}} not found")
    }

    var {{.StructNameLowerFirst}}Entity model.{{.StructName}}
    mapper.Map({{.StructNameLowerFirst}}, &{{.StructNameLowerFirst}}Entity)

    return s.{{ .StructNameLowerFirst }}Repository.Update{{ .StructName }}(ctx, &{{.StructNameLowerFirst}}Entity)
}

func (s *{{ .StructNameLowerFirst }}Service) Delete{{ .StructName }}(ctx context.Context, id uint) (uint, error) {
    _, err := s.Get{{ .StructName }}ById(ctx, id)
    if err == nil {
        return 0, errors.New("{{.StructNameLowerFirst}} not found")
    }

    return s.{{ .StructNameLowerFirst }}Repository.Delete{{ .StructName }}(ctx, id)
}


